[project]
name = "cortex-backend"
version = "0.1.0"
description = "Corporate Agent System Backend with Authentication Service"
readme = "README.md"
requires-python = ">=3.11,<3.14"
authors = [
    { name = "Engineering Team", email = "engineering@example.com" },
]
keywords = ["fastapi", "microservice", "authentication", "corporate", "agent"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",

    # Database
    "sqlalchemy>=2.0.23",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "pgvector>=0.2.4",
    "alembic>=1.13.0",

    # Auth & Security
    "python-jose[cryptography]>=3.3.0",
    "pyjwt[crypto]>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=41.0.7",
    "supabase>=2.3.0",
    "email-validator>=2.3.0",

    # Cache & Queue
    "redis[hiredis]>=5.0.1",
    "celery>=5.3.4",
    "flower>=2.0.1",

    # HTTP Client
    "httpx>=0.25.2",
    "tenacity>=8.2.0",

    # AI/ML
    "openai>=1.3.8",
    "crewai>=0.80.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "langchain-community>=0.3.0",
    "numpy>=1.26.0,<2.0.0",

    # Cloud & Infrastructure
    "boto3>=1.34.7",

    # Observability
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.39.1",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",

    # Utilities
    "python-dotenv>=1.0.0",
    "greenlet>=3.2.4",

    # Presentation Service Dependencies
    "aiohttp>=3.12.15",
    "aiomysql>=0.2.0",
    "aiosqlite>=0.21.0",
    "anthropic>=0.60.0",
    "chromadb>=1.0.15",
    "dirtyjson>=1.0.8",
    "docling>=2.43.0",
    "fastmcp>=2.11.0",
    "google-genai>=1.28.0",
    "nltk>=3.9.1",
    "pathvalidate>=3.3.1",
    "pdfplumber>=0.11.7",
    "pytest>=8.4.1",
    "python-pptx>=1.0.2",
    "sqlmodel>=0.0.24",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=20.1.0",
    "black>=23.12.0",
    "isort>=5.13.2",
    "flake8>=6.1.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "ipython>=8.18.1",
    "rich>=14.2.0",
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=20.1.0",
    "aiosqlite>=0.19.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["services", "shared"]

# Tool configurations
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "B008",  # Do not perform function call in argument defaults
    "E501",  # Line too long (handled by formatter)
]
fix = true

[tool.ruff.isort]
known-first-party = ["services", "shared", "app"]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["services", "shared", "app"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "services/auth/tests"]
pythonpath = ["."]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--asyncio-mode=auto",
    "-v",
]
markers = [
    "performance: Performance tests",
    "integration: Integration tests",
    "unit: Unit tests",
]

[tool.coverage.run]
source = ["services", "shared"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[[tool.uv.index]]
url = "https://download.pytorch.org/whl/cpu"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "rich>=14.2.0",
]