[project]
name = "cortex-auth"
version = "0.1.0"
description = "Shared authentication library for Cortex microservices with JWT validation and FastAPI integration"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Cortex Engineering Team", email = "engineering@example.com" },
]
keywords = ["fastapi", "jwt", "authentication", "authorization", "microservices"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
]

dependencies = [
    "fastapi>=0.104.1",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "email-validator>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=20.1.0",
    "black>=23.12.0",
    "ruff>=0.1.6",
    "httpx>=0.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["cortex_auth"]

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["B008", "E501"]
fix = true

[tool.black]
line-length = 100
target-version = ["py311", "py312"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--asyncio-mode=auto",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
]

[tool.coverage.run]
source = ["cortex_auth"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
